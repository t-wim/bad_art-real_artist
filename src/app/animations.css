/* ============================================================================
   $BART — Global Animations & Effects
   Load once in src/app/layout.tsx:  import "./animations.css";
   Notes:
   - Works alongside Tailwind v4 utilities.
   - All class names are prefixed with .bart- to avoid collisions.
   - Honors reduced-motion preferences.
   ========================================================================== */

/* Brand tokens (fallbacks; override via Tailwind if desired) */
:root {
  --bart-primary: #ff2ca3; /* Neon Pink */
  --bart-secondary: #00ff00; /* Neon Green */
  --bart-accent: #8a2be2; /* Purple */
  --bart-bg: #ffffff;
  --bart-fg: #000000;

  --glow-strength: 0.7;
}

/* Respect user motion preferences */
@media (prefers-reduced-motion: reduce) {
  .bart-anim,
  .bart-wobble,
  .bart-glitch,
  .bart-glow,
  .bart-float,
  .bart-fade-in-up,
  .bart-marquee,
  .bart-grain,
  .bart-tape-peel {
    animation: none !important;
    transition: none !important;
  }
}

/* ========== 1) Subtle wobble (for icons/CTAs) ============================= */
.bart-wobble {
  animation: bart-wobble 1.2s ease-in-out infinite;
  transform-origin: 50% 60%;
}
@keyframes bart-wobble {
  0%,
  100% {
    transform: rotate(0deg) translateZ(0);
  }
  15% {
    transform: rotate(-2.2deg);
  }
  35% {
    transform: rotate(2.2deg);
  }
  55% {
    transform: rotate(-1.2deg);
  }
  75% {
    transform: rotate(1.2deg);
  }
}

/* ========== 2) Neon glow pulse (text/buttons) ============================ */
.bart-glow {
  position: relative;
  filter: drop-shadow(0 0 0.25rem color-mix(in srgb, var(--bart-primary), transparent 40%));
  animation: bart-glow 1.8s ease-in-out infinite;
}
@keyframes bart-glow {
  0%,
  100% {
    text-shadow:
      0 0 calc(6px * var(--glow-strength)) var(--bart-primary),
      0 0 calc(12px * var(--glow-strength)) color-mix(in srgb, var(--bart-primary), transparent 30%);
    box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
  }
  50% {
    text-shadow:
      0 0 calc(10px * var(--glow-strength)) var(--bart-secondary),
      0 0 calc(18px * var(--glow-strength))
        color-mix(in srgb, var(--bart-secondary), transparent 30%);
  }
}

/* ========== 3) CRT-style glitch (sparingly on headings/badges) =========== */
.bart-glitch {
  position: relative;
  isolation: isolate;
}
.bart-glitch::before,
.bart-glitch::after {
  content: attr(data-text);
  position: absolute;
  inset: 0;
  mix-blend-mode: screen;
  pointer-events: none;
}
.bart-glitch::before {
  color: var(--bart-primary);
  transform: translate(0, 0);
  clip-path: inset(0 0 0 0);
  animation: bart-glitch-shift 1.4s steps(12) infinite;
}
.bart-glitch::after {
  color: var(--bart-secondary);
  transform: translate(0, 0);
  clip-path: inset(0 0 0 0);
  animation: bart-glitch-slice 1.1s steps(10) infinite;
  opacity: 0.9;
}

@keyframes bart-glitch-shift {
  0% {
    transform: translate(0, 0);
  }
  10% {
    transform: translate(-1px, -1px);
  }
  20% {
    transform: translate(1px, 1px);
  }
  30% {
    transform: translate(-2px, 1px);
  }
  40% {
    transform: translate(2px, -1px);
  }
  50% {
    transform: translate(0, 0);
  }
  60% {
    transform: translate(1px, -1px);
  }
  70% {
    transform: translate(-1px, 1px);
  }
  80% {
    transform: translate(2px, 2px);
  }
  90% {
    transform: translate(-2px, -2px);
  }
  100% {
    transform: translate(0, 0);
  }
}

@keyframes bart-glitch-slice {
  0% {
    clip-path: inset(0 0 85% 0);
  }
  10% {
    clip-path: inset(15% 0 55% 0);
  }
  20% {
    clip-path: inset(35% 0 35% 0);
  }
  30% {
    clip-path: inset(55% 0 15% 0);
  }
  40% {
    clip-path: inset(70% 0 0 0);
  }
  50% {
    clip-path: inset(0 0 65% 0);
  }
  60% {
    clip-path: inset(25% 0 25% 0);
  }
  70% {
    clip-path: inset(45% 0 5% 0);
  }
  80% {
    clip-path: inset(10% 0 60% 0);
  }
  90% {
    clip-path: inset(80% 0 0 0);
  }
  100% {
    clip-path: inset(0 0 85% 0);
  }
}

/* Helper: apply glitch to text elements.

   Usage: <h1 class="bart-glitch" data-text="BART — Bad Art, Real Artists">BART — Bad Art, Real Artists</h1> */
.bart-glitch[data-text] {
  /* Baseline-Text sichtbar lassen, Glitch-Layer übernehmen den Effekt */
  position: relative;
  color: var(--bart-fg);
  text-shadow: 0 0 0.02em var(--bart-fg);
  backface-visibility: hidden;
  transform: translateZ(0);
  will-change: transform, clip-path, filter;
  /* kleine optische Stabilisierung */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* ========== 4) Tape peel hover (cards/teasers) =========================== */
.bart-tape-peel {
  position: relative;
  transition:
    transform 0.2s ease,
    filter 0.2s ease;
  transform-origin: 10% 10%;
}
.bart-tape-peel:hover {
  transform: rotate(-1.8deg) translateY(-2px);
  filter: drop-shadow(0 6px 10px rgba(0, 0, 0, 0.12));
}

/* ========== 5) Scribble underline (links/inline CTAs) ==================== */
.bart-underline {
  position: relative;
  text-decoration: none;
}
.bart-underline::after {
  content: "";
  position: absolute;
  left: 0;
  right: 0;
  bottom: -0.2em;
  height: 0.3em;
  background: radial-gradient(10px 6px at 6px 50%, var(--bart-secondary) 60%, transparent 61%)
    repeat-x;
  background-size: 12px 100%;
  opacity: 0.9;
  animation: bart-scribble 1.3s ease-in-out infinite;
}
@keyframes bart-scribble {
  0%,
  100% {
    transform: translateX(0);
  }
  50% {
    transform: translateX(4px);
  }
}

/* ========== 6) Fade-in-up (on mount/in-view) ============================= */
.bart-fade-in-up {
  animation: bart-fade-in-up 0.6s cubic-bezier(0.2, 0.7, 0.2, 1) both;
}
@keyframes bart-fade-in-up {
  from {
    opacity: 0;
    transform: translate3d(0, 8px, 0);
  }
  to {
    opacity: 1;
    transform: translate3d(0, 0, 0);
  }
}

/* ========== 7) Float (subtle hover idle) ================================= */
.bart-float {
  animation: bart-float 3.2s ease-in-out infinite;
  will-change: transform;
}
@keyframes bart-float {
  0%,
  100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-4px);
  }
}

/* ========== 8) Marquee (for playful badges) ============================== */
.bart-marquee {
  --speed: 16s;
  overflow: hidden;
  white-space: nowrap;
  position: relative;
}
.bart-marquee > span {
  display: inline-block;
  padding-left: 100%;
  animation: bart-marquee var(--speed) linear infinite;
}
@keyframes bart-marquee {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-100%);
  }
}

/* ========== 9) Film grain flicker (bg overlays) ========================== */
.bart-grain {
  position: relative;
  isolation: isolate;
}
.bart-grain::after {
  content: "";
  position: absolute;
  inset: -10%;
  background-image:
    radial-gradient(rgba(0, 0, 0, 0.06) 1px, transparent 1px),
    radial-gradient(rgba(0, 0, 0, 0.04) 1px, transparent 1px);
  background-size:
    3px 3px,
    5px 5px;
  background-position:
    0 0,
    1px 2px;
  mix-blend-mode: multiply;
  pointer-events: none;
  animation: bart-grain 0.9s steps(10) infinite;
  opacity: 0.6;
}
@keyframes bart-grain {
  0% {
    transform: translate(0, 0);
  }
  10% {
    transform: translate(-1px, 1px);
  }
  20% {
    transform: translate(1px, -1px);
  }
  30% {
    transform: translate(1px, 1px);
  }
  40% {
    transform: translate(-1px, 0);
  }
  50% {
    transform: translate(0, 1px);
  }
  60% {
    transform: translate(1px, 0);
  }
  70% {
    transform: translate(-1px, -1px);
  }
  80% {
    transform: translate(0, -1px);
  }
  90% {
    transform: translate(1px, 1px);
  }
  100% {
    transform: translate(0, 0);
  }
}

/* ========== 10) Utility combos ========================================== */
.bart-cta {
  /* Example combo for primary buttons */
  --glow-strength: 1;
  box-shadow: 0 2px 0 0 var(--bart-fg);
}
.bart-cta:hover {
  transform: translateY(-1px);
}
.bart-cta:active {
  transform: translateY(0);
}

/* ========== 11) Small helpers =========================================== */
.bart-anim-delay-1 {
  animation-delay: 0.15s;
}
.bart-anim-delay-2 {
  animation-delay: 0.3s;
}
.bart-anim-delay-3 {
  animation-delay: 0.45s;
}

.bart-anim-once {
  animation-iteration-count: 1 !important;
}
